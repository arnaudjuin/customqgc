name: Windows Release

on:
  push:
    branches:
      - 'master'
      - 'Stable*'
      - 'feat/*'
    tags:
      - 'v*'
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
    - '*'
    paths-ignore:
      - 'docs/**'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   6.6.*
  ARTIFACT:     QGroundControl-installer.exe
  BUILD_TYPE:   ${{ fromJSON('["DailyBuild", "StableBuild"]')[ github.ref_type == 'tag' || contains(github.ref, 'Stable_' ) ] }}

jobs:
  build:
    runs-on:  windows-2019

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          create-symlink: true
          key: ${{ runner.os }}-Release
          restore-keys: ${{ runner.os }}-Release
          max-size: "2G"
          append-timestamp: false
          variant: "sccache"
        if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'

      - name: Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f --depth 1

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version:      ${{ env.QT_VERSION }}
          aqtversion:   ==3.1.*
          host:         windows
          target:       desktop
          arch:         win64_msvc2019_64
          dir:          ${{ runner.temp }}
          modules:      qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d
          setup-python: false
          cache: true

      - name: Download JOM
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url:    http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: Unzip JOM
        working-directory: ${{ runner.temp }}
        run:  |
              7z x jom.zip -ojom

      - name: Download Gstreamer
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url:    https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/gstreamer-1.0-msvc-x86_64-1.18.1.msi
          target: ${{ runner.temp }}\

      - name: Download Gstreamer dev
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url:    https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/gstreamer-1.0-devel-msvc-x86_64-1.18.1.msi
          target: ${{ runner.temp }}\

      - name: Install Gstreamer
        run:  |
            cmd /c start /wait msiexec /package ${{ runner.temp }}\gstreamer-1.0-msvc-x86_64-1.18.1.msi /passive ADDLOCAL=ALL
            cmd /c start /wait msiexec /package ${{ runner.temp }}\gstreamer-1.0-devel-msvc-x86_64-1.18.1.msi /passive ADDLOCAL=ALL

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Create build directory
        run:  mkdir ${{ runner.temp }}\shadow_build_dir

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run:  |
              qmake -r ${{ env.SOURCE_DIR }}\qgroundcontrol.pro CONFIG+=installer CONFIG+=${{ env. BUILD_TYPE }}
              ${{ runner.temp }}\jom\jom -j2

              - name: ccache post-run
              run:  ccache -s
      
      - name: Save artifact
        uses: actions/upload-artifact@master
        with:
          name: ${ARTIFACT}
          path: ${{ runner.temp }}/shadow_build_dir

      # - name: Upload build to S3 Bucket
      #   if:                 github.event_name == 'push'
      #   working-directory:  ${{ runner.temp }}/shadow_build_dir/package
      #   run: |
      #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
      #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #         aws s3 cp ${ARTIFACT} s3://qgroundcontrol/builds/${{ github.ref_name }}/${ARTIFACT} --region us-west-2 --acl public-read

      # - name: Upload tagged stable build to S3 latest Bucket
      #   if:                 github.event_name == 'push' && github.ref_type == 'tag'
      #   working-directory:  ${{ runner.temp }}/shadow_build_dir/package
      #   run: |
      #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
      #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #         aws s3 cp ${ARTIFACT} s3://qgroundcontrol/latest/${ARTIFACT} --region us-west-2 --acl public-read
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${ARTIFACT} # Replace with the actual artifact name
